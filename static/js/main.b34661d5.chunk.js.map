{"version":3,"sources":["Phonebook.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","withSpace","padding","spacing","margin","phonebookProps","state","phonebookActions","dispatch","addEntry","value","type","delEntry","index","modEntry","AddEntry","connect","classes","defaults","name","phone","useState","setState","change","e","target","Paper","className","TextField","onChange","label","variant","Button","onClick","color","submitEditor","setSubmit","submit","PhonebookList","list","edit","setEdit","List","map","ListItem","key","ListItemAvatar","href","Avatar","ListItemEditor","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","edge","aria-label","Phonebook","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","phonebookDefaults","phonebookStore","createStore","action","filter","_","i","v","ReactDOM","render","store","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b34661d5.chunk.js","sourcesContent":["\nimport React, { useState }     from 'react';\nimport { connect }             from 'react-redux';\n\nimport { makeStyles }          from '@material-ui/core/styles';\nimport Paper                   from '@material-ui/core/Paper';\nimport TextField               from '@material-ui/core/TextField';\nimport Button                  from '@material-ui/core/Button';\nimport IconButton              from '@material-ui/core/IconButton';\nimport List                    from '@material-ui/core/List';\nimport ListItem                from '@material-ui/core/ListItem';\nimport ListItemText            from '@material-ui/core/ListItemText';\nimport ListItemAvatar          from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Avatar                  from '@material-ui/core/Avatar';\nimport PhoneAndroid            from '@material-ui/icons/PhoneAndroid';\nimport DeleteIcon              from '@material-ui/icons/Delete';\nimport EditIcon                from '@material-ui/icons/Edit';\n\nconst useStyles = makeStyles( theme => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  withSpace: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1),\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  }\n}));\n\nconst phonebookProps = state => state\nconst phonebookActions = dispatch => { return {\n  addEntry: value => dispatch({type:'addEntry',value}),\n  delEntry: index => dispatch({type:'delEntry',index}),\n  modEntry: (index,value) => dispatch({type:'modEntry',index,value})\n}}\n\nconst AddEntry = connect( null, phonebookActions )\n( function ({addEntry}){\n  const classes = useStyles();\n  const defaults = { name:'', phone:'' };\n  const [state,setState] = useState(defaults);\n  const {name,phone} = state;\n  const change = e => setState({...state,[e.target.name]:e.target.value});\n  const submit = e => { addEntry({name,phone}); setState(defaults) };\n  return (\n  <Paper className={classes.withSpace}>\n    <TextField onChange={change} value={name}  name=\"name\"  label=\"Full Name\"    variant=\"outlined\" />\n    <TextField onChange={change} value={phone} name=\"phone\" label=\"Phone Number\" variant=\"outlined\" />\n    <Button     onClick={submit} color=\"primary\" variant=\"contained\">Add</Button>\n  </Paper> );\n});\n\nlet submitEditor = false;\nconst setSubmit = submit => submitEditor = submit;\n\nconst PhonebookList = connect( phonebookProps, phonebookActions )\n( function({list,delEntry}) {\n  const classes = useStyles();\n  const [ edit, setEdit ] = useState(-1);\n  return (\n    <Paper className={classes.withSpace}>\n      <List className={classes.root}>\n      { list.map( ({name,phone},index)=>\n        <ListItem key={index}>\n            <ListItemAvatar>\n              <a href={`tel:${phone}`}>\n              <Avatar>\n                <PhoneAndroid/>\n              </Avatar>\n              </a>\n            </ListItemAvatar>\n          {\n            edit === index\n            ? <ListItemEditor index={index} setSubmit={setSubmit}/>\n            : <ListItemText primary={name} secondary={phone} />\n          }\n          <ListItemSecondaryAction>\n            <IconButton edge=\"start\" aria-label=\"modify\"\n              color={ edit === index ? 'primary' : 'secondary' }\n              onClick={e => {\n                if ( edit === index ){\n                  submitEditor();\n                  setEdit(-1);\n                } else setEdit(index);\n              }}>\n              <EditIcon />\n            </IconButton>\n            <IconButton edge=\"end\" aria-label=\"delete\"\n              onClick={e => delEntry(index)}>\n              <DeleteIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )}\n      </List>\n    </Paper>\n  );\n});\n\nconst ListItemEditor = connect( phonebookProps, phonebookActions )\n( function({list,index,modEntry,setSubmit}){\n  const [state,setState] = useState(list[index]);\n  const {name,phone} = state;\n  const change = e => setState({...state,[e.target.name]:e.target.value});\n  setSubmit( e => modEntry( index, {name,phone} ) ); // submitEditor\n  return ( <>\n    <TextField onChange={change} value={name}  name=\"name\"  label=\"Full Name\"    variant=\"standard\" />\n    <TextField onChange={change} value={phone} name=\"phone\" label=\"Phone Number\" variant=\"standard\" />\n  </> );\n});\n\nfunction Phonebook() {\n  return <>\n    <AddEntry/>\n    <PhonebookList/>\n  </>\n}\n\nexport default Phonebook;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Phonebook from './Phonebook';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux'\nimport { Provider    } from 'react-redux'\n\nconst phonebookDefaults = {\n  list:[\n    { name:\"Sebastian Glaser\", phone:\"+49 1233 123 123 322\" }\n  ]\n}\n\nconst phonebookReducer = ( state=phonebookDefaults, action )=> {\n  const { type, index, value } = action;\n  const { list } = state;\n  switch (type) {\n    case 'addEntry':\n      state = { ...state,\n        list: [value,...list]\n      }; break;\n    case 'delEntry':\n      state = { ...state,\n        list: list.filter( (_,i)=> index !== i )\n      }; break;\n    case 'modEntry':\n      state = { ...state,\n        list: list.map( (v,i)=> index === i ? value : v )\n      }; break;\n    default: break; }\n  return state;\n}\n\nconst phonebookStore = createStore(\n    phonebookReducer\n);\n\nReactDOM.render(\n  <Provider store={phonebookStore}>\n    <Phonebook/>\n  </Provider>\n  , document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}